// Generated on <%= getCurrentFormatedDate() %> using <%= cliVersion %>. DO NOT MODIFY
// Copyright (c) 2005-<%= new Date().getFullYear() %>, Coveo Solutions Inc.

using System.Diagnostics;
using System.IO;
using sfdx4csharpClient.Core;

namespace sfdx4csharpClient
{
    /// <summary>
    /// A client using the Salesforce Developer Experience (SFDX) command-line interface.
    /// </summary>
    /// <remarks>
    /// In order to use this client, you need to install the sfdxcli on your machine.
    /// How to: https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_intro.htm
    /// </remarks>
    public class GeneratedSFDXClient
    {<% _.each(classDefinitions, function(classDefinition) { %>
        public <%= classDefinition.className %> <%= classDefinition.fileName %> { get; }<% }) %>

        private readonly CommandRunner m_CmdRunner;

        /// <summary>
        /// Initialize the modules that encapsulate the commands in the force namespace.
        /// </summary>
        /// <param name="p_Path">File path to the SFDC CLI executable.</param>
        /// <param name="p_WorkingFolder">The working folder where to run SFDX commands.</param>
        public GeneratedSFDXClient(string p_Path,
            string p_WorkingFolder = "")
        {
            Debug.Assert(!string.IsNullOrEmpty(p_Path));
            Debug.Assert(File.Exists(p_Path));
            Debug.Assert(string.IsNullOrEmpty(p_WorkingFolder) || Directory.Exists(p_WorkingFolder));

            m_CmdRunner = new CommandRunner(p_Path, p_WorkingFolder);
            CommandExecutioner executioner = new CommandExecutioner(m_CmdRunner);<%
            _.each(classDefinitions, function(classDefinition) { %>
            this.<%= classDefinition.fileName %> = new <%= classDefinition.className %>(executioner);<% }) %>
        }

        /// <summary>
        /// Changes the working folder of the SFDX client.
        /// </summary>
        /// <param name="p_WorkingFolder">The new working folder where to run SFDX commands.</param>
        public void ChangeWorkingFolder(string p_FolderPath)
        {
            Debug.Assert(!string.IsNullOrEmpty(p_FolderPath));
            Debug.Assert(Directory.Exists(p_FolderPath));
            m_CmdRunner.WorkingFolder = p_FolderPath;
        }
    }
}
