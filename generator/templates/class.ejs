// Generated on <%= getCurrentFormatedDate() %> using <%= cliVersion %>. DO NOT MODIFY

using sfdx4csharp.Client.Core;
using sfdx4csharpClient.Core;
using sfdx4csharpClient.Core.Attributes;
<%
    escapeForComments = function(element, apiCommand = "", numberOfSpaces = 8) {
        if (element === undefined) {
            return element;
        }

        var cleanElement = element.split("\<\%= config.bin \%\>").join("$ sf")
        cleanElement = cleanElement.split("\<\%= command.id \%\>").join(apiCommand)
        cleanElement = cleanElement.split("<").join("[")
        cleanElement = cleanElement.split(">").join("]")
        cleanElement = cleanElement.split("&").join("&amp;")

        var spaces = new Array(numberOfSpaces + 1).join(" ");
        return cleanElement.replace(/\*\//g, "* /").replace(/\n/g, "\n" + spaces + "/// ");
    }
%>
namespace sfdx4csharpClient
{<% 
    _.each(functionDefinitions, function(functionDef) { %>
    /// <summary>
    /// Options for the method <%= functionDef.name %> of class <%= className %>.
    /// </summary>
    public class <%= className %><%= capitalizeFirstLetter(functionDef.name) %>Options : SfOptions
    {<%
        _.each(functionDef.parameters, function(functionParameter, index) {
            if(functionParameter.name == 'json'){
                // Skip this parameter, it will be handle by SfOptions
                return;
            }
            
            // Preprocessing types for C#.
            functionParameter.type = functionParameter.type.replace('IStringKeyPair[] | string[] | string', 'string');
            functionParameter.type = functionParameter.type.replace('Boolean', 'bool');
            functionParameter.type = functionParameter.type.replace('loglevel', 'LogLevel');
            functionParameter.type = functionParameter.type.replace('number', 'int');

            if(functionParameter.name == 'namespace')  {
                functionParameter.name = '@namespace';
            }

            // String in C# are optional by default.
            addExclamation = functionParameter.optional
            if(functionParameter.type == 'string') {
                addExclamation = false;
            }%>
        /// <summary>
        /// <%= functionParameter.optional ? '[Optional]' : '[Required]' %> <%= escapeForComments(functionParameter.description) %>
        /// </summary>
        [SwitchName("<%= functionParameter.flagKey %>")]
        public <%= functionParameter.type %><% if(addExclamation){ %>?<% } %> <%= functionParameter.name %> { get; set; }
<% }) %>    }
<% }) %>
    /// <summary>
    /// <%= className %>
    /// </summary>
    [CommandClass("<%= apiCommandClass %>")]
    public class <%= className %> : SfCommand
    {
        /// Constructor.
        public <%= className %>(CommandExecutioner commandExecutioner)
                : base(commandExecutioner)
        {
        }
<% _.each(functionDefinitions, function(functionDef) { 
    var capitalizedFunctionName = capitalizeFirstLetter(functionDef.name);
%>
        /// <summary>
        /// <%= escapeForComments(functionDef.shortDescription, functionDef.apiCommand) %>
        /// </summary>
        /// <remarks>
        /// <%= escapeForComments(functionDef.description, functionDef.apiCommand) %>
        /// </remarks>
        /// <example>
        /// <%= escapeForComments(functionDef.example, functionDef.apiCommand) %>
        /// </example>
        [Command("<%= functionDef.apiCommand %>")]
        public SfResponse <%= capitalizedFunctionName %>(<%= className %><%= capitalizedFunctionName %>Options options<% if(isAllOptionalParameters(functionDef.parameters)) {%> = null<%} %>)
        {
            return ExecuteCommand(nameof(<%= capitalizedFunctionName %>), options);
        }
<% }) %>    }
}
